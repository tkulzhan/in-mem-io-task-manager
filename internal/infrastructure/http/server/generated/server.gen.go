//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// CreateTaskRequest defines model for CreateTaskRequest.
type CreateTaskRequest struct {
	// Data Task-specific data fields. Varies by type.
	Data map[string]interface{} `json:"data"`

	// Type The type of the task (e.g., 'default', 'email', 'backup')
	Type *string `json:"type,omitempty"`
}

// Task defines model for Task.
type Task struct {
	// CreatedAt Time when the task was created
	CreatedAt time.Time `json:"created_at"`

	// Data Original input fields for this task
	Data *map[string]interface{} `json:"data,omitempty"`

	// FinishedAt Time when the task finished or was canceled
	FinishedAt *time.Time `json:"finished_at"`

	// Id Unique identifier for the task
	Id string `json:"id"`

	// ProcessingTime Processing time in human readable format
	ProcessingTime *string `json:"processing_time"`

	// StartedAt Time when the task started processing
	StartedAt *time.Time `json:"started_at"`

	// Status Status of the task ('pending', 'in-progress', 'canceled', 'finished')
	Status string `json:"status"`

	// Type Type of the task
	Type string `json:"type"`
}

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = CreateTaskRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new task
	// (POST /tasks)
	CreateTask(w http.ResponseWriter, r *http.Request)
	// Delete a specific task by ID
	// (DELETE /tasks/{taskId})
	DeleteTaskById(w http.ResponseWriter, r *http.Request, taskId string)
	// Get a specific task by ID
	// (GET /tasks/{taskId})
	GetTaskById(w http.ResponseWriter, r *http.Request, taskId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTaskById operation middleware
func (siw *ServerInterfaceWrapper) DeleteTaskById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTaskById(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTaskById operation middleware
func (siw *ServerInterfaceWrapper) GetTaskById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", r.PathValue("taskId"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskById(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/tasks", wrapper.CreateTask)
	m.HandleFunc("DELETE "+options.BaseURL+"/tasks/{taskId}", wrapper.DeleteTaskById)
	m.HandleFunc("GET "+options.BaseURL+"/tasks/{taskId}", wrapper.GetTaskById)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xW3W4bNxN9lQG/D3ALrKRdxQqcvUsaNNBVgybtRYMgGC1npYl3yTXJtSsYevdiSEmW",
	"tJKR/l6JpoecM+cMz+yjqmzbWUMmeFU+Kl+tqMW4/MERBvqI/vZnuuvJB9nsnO3IBaYYojFg/CVfOe4C",
	"W6NKJUdGvqOKa65AYqBmarQfw6/omDws1hDWHY1Vpuh3bLuGztyyYg/sAcHHCAjob+EgRk4HDnJWfUgh",
	"klltMiWXq1LZxVeqwtPGMAVFHGBrCKtthu9ovBxncKWpxr4JVxlcUYvcyGKB1W3fXX1/iFttA9U+rQ+O",
	"zVJtNplydNezI63KT4msz2fARdQDbqtIv/6C4QxwbgkeVmSeYD+gh+2RI3TTfDob5S9H01cfi2mZ52We",
	"/6YyVVvXys2CikaBWxrizy7o+5PjJRtsgE3Xh622UFsHQTQTOP+ZsDUb9qtvp2kXD9YlytBU1DzP2ew5",
	"zkzfNLiQY8H1dIZD1kNgvxi+6wlYkwlcM7ktezQgT+FNsahuisVIE+rRNc30CBd1PXqV37yc6YKKF4vi",
	"nHSdsxV5z2b5JSIdYHi/DwAJADaw6ls04Ai1VATbeg/RzKBl0wfy31K5D+j+RAdvw+EJ+XOiFH9LFB8w",
	"9H4I60PcP/aDq46MZrMUA2Az6pxdOvJe/tx1j6x3nXXiDgcnzsl0wZhOTOkv+Q3rXci+3uzQVY4EOn5J",
	"w/YZ+pakY1PbIfrX7+cQVhgAm8Y+eFjbHoKFFg0uUz1eug0Tv2nbAXZdwxVGA4AfCUPvSOKqpteUrI3N",
	"MgNNDaUVGg2OgmO6j10sFx96h+C4L+LTikn2QSpT9+R8QluM83EuUtiODHasSvUibmWqw7CKTTJJx8Sj",
	"bZqD4tQR61yr8mBUqqQB+fDG6nX0cWsCmXjooMTJVy/ZdwNXVv93VKtS/W/yNJEn23E8Gc7izbHc0udx",
	"w3fW+DRBpnnxjwFIBiw5h7N+N3fA95U0Td03zVoYvc7zYXfMzT02LMrtCsmU79sW3XrPJCAYekitL/9P",
	"/E8e5WeuN+nShgINpXgb9wXWm/VcqwEl1+e/V1JbDWo4wpaulrm1+7aJDbxYw/ytlLukM63xjsJlMPm/",
	"rs9rkDe8HbJJk0sMGBugtr3RJ2W/o3C55g4dthTIeVV+elQst8mzERNGGTsqaaZOmzU7KOzUxz5vNps/",
	"AgAA//+0WFIlmQoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
